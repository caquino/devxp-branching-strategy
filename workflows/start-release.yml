name: Start Release
on:
  workflow_dispatch:
    inputs:
      divisionPrefix:
        description: 'Division (ppb, fd)'
        required: true
      changeType:
        description: 'Change type (major, minor)'
        required: true
jobs:
  checkDevelop:
    name: Check ${{ github.event.inputs.divisionPrefix }}/develop Branch exists
    runs-on: ubuntu-latest

    outputs:
      develop: ${{ steps.validate_develop_branch.outputs.develop_exist }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: DevXP Branching Strategy - Setup
        uses: Flutter-Global/devxp-branching-strategy

      - id: validate_develop_branch
        name: Validate develop branch exists
        run: |
          export DOES_DEVELOP_EXIST=`bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/check-branch-remote.sh ${{ github.event.inputs.divisionPrefix }}/develop`
          echo "Does develop branch exist? (0=Yes) $DOES_DEVELOP_EXIST"
          echo "::set-output name=develop_exist::$DOES_DEVELOP_EXIST"

      - id: checks_exit
        name: Exit check based on previous validations
        run: |
          echo "Exit code (0=if exists develop branches;1=otherwise):  ${{steps.validate_develop_branch.outputs.develop_exist}}"
          exit ${{steps.validate_develop_branch.outputs.develop_exist}}

  checkRelease:
    name: Check Release doesn't exists
    needs: checkDevelop
    runs-on: ubuntu-latest

    outputs:
      release: ${{ steps.validate_release_branch.outputs.release_exist }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: DevXP Branching Strategy - Setup
        uses: Flutter-Global/devxp-branching-strategy

      - id: validate_release_branch
        name: Validate release branch exists
        run: |
          export DOES_RELEASE_EXIST=`bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/check-branch-remote.sh */release/*`
          echo "Does release branch exist? (0=Yes) $DOES_RELEASE_EXIST"
          echo "::set-output name=release_exist::$DOES_RELEASE_EXIST"

      - id: checks_exit
        name: Exit check based on previous validations
        run: |
          echo "Exit code (0=if does exists any release branch;1=otherwise): ${{steps.validate_release_branch.outputs.release_exist}}"
          if [[ ${{steps.validate_release_branch.outputs.release_exist}} == 0 ]]; then
            exit 1
          else
            exit 0
          fi

  checkCommitsBehind:
    name: Check ${{ github.event.inputs.divisionPrefix }}/develop is not behind ${{ github.event.repository.default_branch }}
    needs: checkRelease
    runs-on: ubuntu-latest

    outputs:
      commits_behind: ${{ steps.validate_commits_behind_master.outputs.commits_exist }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: DevXP Branching Strategy - Setup
        uses: Flutter-Global/devxp-branching-strategy

      - id: validate_commits_behind_master
        name: Validate commits behind master exists
        run: |
          export DOES_COMMITS_BEHIND_EXIST=`bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/exist-commits-behind.sh origin/${{ github.event.repository.default_branch }} origin/${{ github.event.inputs.divisionPrefix }}/develop`
          echo "Does commits behind master exist? (0=Yes) $DOES_COMMITS_BEHIND_EXIST"
          echo "::set-output name=commits_exist::$DOES_COMMITS_BEHIND_EXIST"

      - id: checks_exit
        name: Exit check based on previous validations
        run: |
          echo "Exit code (0=if exists any commit behind;1=otherwise): ${{steps.validate_commits_behind_master.outputs.commits_exist}}"
          if [[ ${{steps.validate_commits_behind_master.outputs.commits_exist}} == 0 ]]; then
            exit 1
          else
            exit 0
          fi

  startRelease:
    runs-on: ubuntu-latest
    needs: checkCommitsBehind
    if: ${{needs.checkDevelop.outputs.develop == '0' && needs.checkRelease.outputs.release == '1' && needs.checkCommitsBehind.outputs.commits_behind == '1'}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: '${{ github.event.inputs.divisionPrefix }}/develop'

      - name: DevXP Branching Strategy - Setup
        uses: Flutter-Global/devxp-branching-strategy

      - name: Get branch name and semver
        run: |
          echo "BRANCH_NAME=$(bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/gen-release-branch-name.sh ${{ github.event.inputs.changeType }})" >> $GITHUB_ENV
          echo "SEMVER=$(bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/gen-release-semver.sh ${{ github.event.inputs.changeType }})" >> $GITHUB_ENV

      - name: Print branch name and semver
        run: |
          echo "$BRANCH_NAME"
          echo "$SEMVER"

      - name: Get last tag and current version from develop
        run: |
          git checkout "${{ github.event.inputs.divisionPrefix }}/develop"
          export LAST_TAG=`git tag -l "*${{ github.event.inputs.divisionPrefix }}.alpha*" --sort=-v:refname | head -n 1`
          echo $LAST_TAG
          export CURRENT_VERSION=`bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/gen-current-semver.sh`
          echo $CURRENT_VERSION

      - name: Tag develop branch
        run: |
          git checkout "${{ github.event.inputs.divisionPrefix }}/develop"
          git tag -f "$(bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/gen-current-semver.sh)"
          git push origin "${{ github.event.inputs.divisionPrefix }}/develop" --tags

      - name: Create release branch
        run: |
          git checkout -b "${{ github.event.inputs.divisionPrefix }}/release/$BRANCH_NAME"
          git tag $SEMVER
          git push origin "${{ github.event.inputs.divisionPrefix }}/release/$BRANCH_NAME" --tags
