name: Sync Hotfix
on:
  pull_request:
    types: [ closed ]
    branches:
      - 'main'
      - 'master'

jobs:
  syncHotfix:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && contains(github.head_ref, 'hotfix') }}

    steps:
     - name: Checkout
       uses: actions/checkout@v2
       with:
         fetch-depth: 0

      - name: DevXP Branching Strategy - Setup
        uses: Flutter-Global/devxp-branching-strategy

     - name: Initialize mandatory git config
       run: |
         git config user.email github.actions@example.com
         git config user.name "GitHub Actions"

     - name: Tag hotfix version
       run: |
         export HOTFIXVERSION=`basename ${{ github.head_ref }}`
         echo "hotfixVersion:$HOTFIXVERSION"
         git tag $HOTFIXVERSION
         git push origin ${{ github.event.repository.default_branch }} --tags

     - name: Synchronize PPB develop
       run: |
         bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/sync-develop.sh ppb hotfix_rel ${{ github.event.repository.default_branch }}
         export RESULT=`echo $?`
         echo "Does sync develop run successfully? (0=Yes) $RESULT"
         if [[ $RESULT == 0 ]]; then
           exit 0
         else
           exit 1
         fi

     - name: Synchronize FD develop
       run: |
         bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/sync-develop.sh fd hotfix_rel ${{ github.event.repository.default_branch }}
         export RESULT=`echo $?`
         echo "Does sync develop run successfully? (0=Yes) $RESULT"
         if [[ $RESULT == 0 ]]; then
           exit 0
         else
           exit 1
         fi

  checkRelease:
    name: Check if Release exists or not
    if: ${{ github.event.pull_request.merged == true && contains(github.head_ref, 'hotfix') }}
    needs: syncHotfix
    runs-on: ubuntu-latest

    outputs:
      release: ${{ steps.validate_release_branch.outputs.release_exist }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: DevXP Branching Strategy - Setup
        uses: Flutter-Global/devxp-branching-strategy

      - id: validate_release_branch
        name: Validate release branch exists
        run: |
          export DOES_RELEASE_EXIST=`bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/check-branch-remote.sh */release/*`
          echo "Does release branch exist? (0=Yes) $DOES_RELEASE_EXIST"
          echo "::set-output name=release_exist::$DOES_RELEASE_EXIST"

  syncRelease:
    runs-on: ubuntu-latest
    needs: checkRelease
    if: ${{ github.event.pull_request.merged == true && contains(github.head_ref, 'hotfix') && needs.checkRelease.outputs.release == '0'}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: DevXP Branching Strategy - Setup
        uses: Flutter-Global/devxp-branching-strategy

      - name: Initialize mandatory git config
        run: |
          git config user.email github.actions@example.com
          git config user.name "GitHub Actions"

      - name: Merge to open release branch (only if sync reason was a hotfix integration)
        run: |
          export RELEASE_BRANCH=`bash ${GITHUB_WORKSPACE}/devxp-branching-strategy/extract-git-release-branch.sh */release/*`
          echo "Release branch: $RELEASE_BRANCH"
          git checkout $RELEASE_BRANCH
          git pull
          git merge --squash "${{ github.event.repository.default_branch }}" -m "Merged ${{ github.event.repository.default_branch }} into $RELEASE_BRANCH"
          git diff-index --quiet HEAD || git commit -m "Merged ${{ github.event.repository.default_branch }} into $RELEASE_BRANCH"
          git push origin $RELEASE_BRANCH
